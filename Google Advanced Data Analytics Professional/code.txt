class Node:
    def __init__(self, section):
        self.section = section
        self.prev = None
        self.next = None

class LibraryNavigator:
    def __init__(self):
        self.head = None  # Start of the doubly linked list
        self.current = None  # Current position in navigation

    def moveForward(self, section):
        new_node = Node(section)
        if self.current:
            # Remove any forward history
            self.current.next = None
            
            # Link current node to the new node
            new_node.prev = self.current
            self.current.next = new_node
        else:
            # If there's no current node, initialize head
            self.head = new_node
        
        self.current = new_node  # Move to the new node

    def moveBackward(self):
        if self.current and self.current.prev:
            self.current = self.current.prev
        else:
            return None  # Already at the start

    def getCurrentPath(self):
        path = []
        node = self.head
        while node:
            path.append(node.section)
            if node == self.current:
                break
            node = node.next
        return '>'.join(path)

# Example Usage
navigator = LibraryNavigator()
navigator.moveForward('Fiction')
navigator.moveForward('SciFi')
navigator.moveForward('Asimov')
print(navigator.getCurrentPath())  # Output: Fiction>SciFi>Asimov
navigator.moveBackward()
print(navigator.getCurrentPath())  # Output: Fiction>SciFi

navigator = LibraryNavigator()
navigator.moveForward('History')
navigator.moveForward('World')
navigator.moveBackward()
navigator.moveForward('Ancient')
print(navigator.getCurrentPath())  # Output: History>Ancient
